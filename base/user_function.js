function hello(){
  document.write('Hello, World! <br>');
}
hello();		//Hello, World! 
hello();		//Hello, World! 
----------------------------------------
Если мы зададим несколько параметров - то каждый из них будет лежать в своей переменной внутри функции!

function hello(test){
  document.write(test);
}
hello('Ma doare capul de javascript!');	//Ma doare capul de javascript!

------------------------------ return ----------------------------
Сделаем теперь так, чтобы функция не выводила что-то на экран, а возвращала текст скрипту, 
чтобы он смог записать этот текст в переменную и как-то обработать его дальше:
//Зададим функцию:
function hello(name) //укажем здесь параметр name, в котором будет лежать имя человека
{
	//Введем переменную text, в которую запишем всю фразу:
	var text = 'Привет, ' + name + '!';

	/*
		Укажем функции с помощью инструкции 'return', 
		что мы хотим, чтобы она ВЕРНУЛА содержимое переменной text:
	*/
	return text;
}

//Теперь вызовем нашу функцию и запишем значение в переменную message:
var message = hello('Дима');

//И теперь в переменной text лежит 'Привет, Дима!':
document.write(message); //убедимся в этом

//Поздороваемся сразу с группой людей из трех человек:
document.write(hello('Вася') + ' ' + hello('Петя') + ' ' + hello('Коля')); 

//Привет, Дима!Привет, Вася! Привет, Петя! Привет, Коля!
------------------------ Частая ошибка с return -------------------------
function func(param){
	/*
		Если переменная param имеет значение true, то вернем 'Верно!'.
		Напоминаю о том, что конструкция if(param) эквивалентна if(param === true)!
	*/
	if (param) return 'Верно!';
	/*
		Далее новичок в JavaScript хочет проделать еще какие-то операции,
		но если переменная param имеет значение true – сработает инструкция return,
		и код ниже работать не будет!

		Напротив, если param === false – инструкция return не выполнится
		и код дальше будет работать!

	*/
	alert('Привет, мир!');
}
//Осознайте это и не совершайте глупых ошибок!
------------------------ Как сделать проще всего ---------------------------
function func(param)
{
	/*
		Что делает код:
		если param имеет значение true – то в переменную result запишем 'Верно!',
		иначе 'Неверно!'.

		Еще раз напоминаю о том, что конструкция if(param) эквивалентна if(param === true)!
	*/
	if (param) var result = 'Верно!'
	else var result = 'Неверно!';

	//Вернем содержимое переменной result:
	return result;
}

//Теперь упростим нашу функцию, используя прием работы с return:
function func(param)
{
	/*
		Что делает код:
		если param имеет значение true – вернет 'Верно!',
		иначе вернет 'Неверно!'.
	*/
	if (param) return 'Верно!';
	else return 'Неверно!';

	/*
		Обратите внимание на то, насколько упростился код!
		Плюсом также является то, что мы убрали лишнюю переменную result.
	*/
}
------------------------- Значения по умолчанию ---------------------
function func(num)
{
	return num*num
}
----------
function func(num)
{
	if (num === undefined)
		num = 3;

	return num*num
}
----------
function func(num)
{
	num = num || 3;
	return num*num
}

------------------ Область видимости переменных --------------------
переменная внутри функции не видна снаружи, она является локальной внутри функции:

function func()
{
	var local = 'Тест!';
	alert(local); //выведет 'Тест!'
}
func();

alert(local); //выведет undefined
----------------------
та переменная test, которая находится вне функции, это не та переменная test, 
которая находится внутри нее:

var test = 'Тест!';
function func()
{
	var test = 'Локальная!';	
	alert(test); //выведет 'Локальная!'
}
func();
-----------------------
если внутри функции переменная не объявлена через 
var - она будет считаться глобальной:

var test = 'Тест!';
function func()
{
	alert(test); //выведет 'Тест!'
}
func();
------------------------
переменная внутри функции не видна снаружи:

function func()
{
	var local = 'Тест!';
	alert(local); //выведет 'Тест!'
}
func();

alert(local); //выведет undefined
-------------
function func()
{
	local = 'Тест!';
	alert(local); //выведет 'Тест!'
}
func();

alert(local); //выведет 'Тест!'
----------------------------- Строгий режим ----------------------------
Забыв поставить var, можно случайно затереть глобальную переменную, 
что является источником трудноуловимых ошибок. Поэтому рекомендуется включать 
ак называемый строгий режим командой 'use strict';, 
которая пишется в начале скрипта.

'use strict';

var test = 'Привет!';

function func()
{
	test = 'Тест!'; //будет ошибка, нет var
}
func();

alert(test);
---------------- Глобальные переменные через window --------------------
Однако, это еще не все: все глобальные переменные являются свойствами объекта window:
Такую особенность можно использовать для обмена данными между функциями:

function func1()
{
	window.test = 'Тест!';
}

function func2()
{
	alert(window.test); 
}

func1();  //<--- без этого вызова не сработает
func2();	//выведет 'Тест!'
------------------------------ Рекурсия ------------------------------
рекурсия - это когда функция вызывает сама себя.
выведем все элементы массива с конца с помощью рекурсии (для примера, цикл тут эффективнее).
Для этого мы будем использовать метод pop, который забирает из массива 
последний элемент (массив при этом уменьшается). Затем будем проверять, 
осталось ли что в массиве с помощью empty.

Если осталось, опять запускаем эту же функцию last, которая забирает последний элемент, 
проверяет осталось ли что в массиве и запускает саму себя при необходимости:

var arr = [1, 2, 3, 4, 5];

last(arr);

function last()  //sau last(arr)
{
	document.write(arr.pop() + '<br>'); //выводим последний элемент массива
    
	if(arr.length != 0)
	{
		last(arr); //это рекурсия 
	}
}